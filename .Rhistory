summary(dat)
rm(NHIS_Picked)
rm(NHIS_Picked,nm,rsubset)
library(data.table) #load in the package
set.seed(1234)
load("C:/Users/joshu/Documents/Research/ML Research/Data/NHIS_Variable_Picked2.RData")
rsubset <- sample(nrow(NHIS_Picked), 5000)
dat <- NHIS_Picked[rsubset,]
dat <- droplevels(dat) #automatically converts things
for (nm in names(dat)) {
if (is.character(dat[,nm])) {
dat[,nm] <- as.factor(dat[,nm])
}
}
summary(dat)
rm(NHIS_Picked,nm,rsubset)
dat2 <- data.table(dat)
is.data.frame(dat2)
is.data.frame(dat)
attr(dat2)
attributes(dat2)
class(dat2)
class(dat)
is.data.table(dat)
is.data.table(dat2)
dat2$sex
load("C:/Users/joshu/Documents/Research/ML Research/Data/NHIS_Variable_Picked_3.RData")
rsubset <- sample(nrow(NHIS_Picked), 5000)
rsubset <- sample(nrow(NHIS), 5000)
dat <- NHIS_Picked[rsubset,]
dat <- droplevels(dat) #automatically converts things
dat <- NHIS[rsubset,]
dat <- droplevels(dat) #automatically converts things
for (nm in names(dat)) {
if (is.character(dat[,nm])) {
dat[,nm] <- as.factor(dat[,nm])
}
}
summary(dat)
rm(NHIS_Picked,nm,rsubset)
rm(NHIS,nm,rsubset)
library(data.table) #load in the package
dat2 <- data.table(dat)
is.data.frame(dat)
is.data.frame(dat2)
is.data.table(dat)
is.data.table(dat2)
class(dat)
class(dat2)
summary(dat[dat$sex == "1 Male"])
summary(dat[dat$sex == "1 Male",])
summary(dat[dat$sex == "1 Male",c("region","age.p")])
summary(dat[dat$sex == "1 Male",c("region","age_p")])
summary(dat[sex == '1 Male', .(region,age_p)])
summary(dat[sex == '1 Male', c(region,age_p)])
summary(dat[sex == '1 Male', region,age_p])
?data.table
summary(dat[sex == '1 Male', .(region,age_p)])
summary(dat2[sex == '1 Male', .(region,age_p)])
dat2[sex == '1 Male',region]
summary(dat2[sex == '1 Male',region])
summary(dat2[sex == '1 Male',.(region)])
summary(dat2[,.(region), by = sex])
dat2[,summary(region), by = sex]
dat2[,sum.region = summary(region), by = sex]
dat2[,sum.region := summary(region), by = sex]
dat2[,summary(region), by = sex]
dat2[region,summary(region), by = sex]
dat2[,.(summary(region)), by = sex]
dat2[,`:=` .(x = summary(region)), by = sex]
dat2[,`:=` (x = summary(region)), by = sex]
dat2[`:=` (x = summary(region)), by = sex]
dat2[, summary(region), by = sex]
summary(dat2[,region])
summary(dat2[,region, by = sex])
summary(dat2[,region,sex,])
summary(dat2[, region, by = sex])
dat2$bmi
dat2$aheight
dat2$aheight-p
dat2$hhx
Auto <- read.csv("AutoClaims.csv")
getwd()
setwd("../..")
getwd()
setwd("../..")
getwd()
getwd("./School")
setwd("./School")
setwd("./Old School")
setwd("./Old School/Fall 2016")
setwd("./Fall 2016")
setwd("./654")
Auto <- read.csv("AutoClaims.csv")
auto
summary(Auto)
setwd("./School/Fall 2016/654")
options(scipen = 999)
WiscLottery <- read.csv("WiscLottery.csv")
TermLife <- read.csv("./Fall 2016/654/TermLife.csv")
TermLife <- read.csv("TermLife.csv")
summary(TermLife)
Nursing <- read.csv("WiscNursingHome.csv")
library(data.table)
Nursing.dt <- as.data.table(Nursing)
Nursing.dt <- Nursing.dt[Nursing.dt$CRYEAR == 2001]
Nursing <- as.data.frame(Nursing.dt)
Nursing$LogNumbed <- log(Nursing$NUMBED)
Nursing$LogTPY <- log(Nursing$TPY)
summary(Nursing[c("LogNumbed","LogTPY")])
classData <- read.csv("HealthExpend.csv")
classData
summary(classData)
dat <- read.csv("HealthExpend.csv")
for (nm in names(dat)) {
if (is.character(dat[,nm])) {
dat[,nm] <- as.factor(dat[,nm])
}
}
summary(dat)
rm(NHIS,nm,rsubset)
library(data.table) #load in the package
dat2 <- data.table(dat)
is.data.frame(dat)
is.data.frame(dat2)
is.data.table(dat)
is.data.table(dat2)
class(dat)
class(dat2)
summary(dat[dat$sex == "1 Male",c("region","age_p")])
names(dat) <- tolower(names(dat))
dat <- read.csv("HealthExpend.csv")
for (nm in names(dat)) {
if (is.character(dat[,nm])) {
dat[,nm] <- as.factor(dat[,nm])
}
}
summary(dat)
names(dat) <- tolower(names(dat))
library(data.table) #load in the package
dat2 <- data.table(dat)
is.data.frame(dat)
is.data.frame(dat2)
is.data.table(dat)
is.data.table(dat2)
class(dat)
class(dat2)
summary(dat[dat$sex == "1 Male",c("region","age_p")])
summary(dat2
)
summary(dat[dat$educ ==  "COLLEGE",c("maristat","income")])
summary(dat2[educ == 'COLLEGE', .(maristat,income)]) #noticec the syntax here
summary(dat2[educ == 'COLLEGE',income])
dat2$income1
summary(dat2[sex == '1 Male',.(income)]) #notice the difference
summary(dat2[educ == 'COLLEGE',.(income)]) #notice the difference
str(Dat2)
str(dat2)
summary(dat$expendop)
summary(dat2[, expendop, by = sex])
summary(dat2[, expendop, by = educ])
dat2[, mean(expendop), by = educ]
dat2[, newVar := expendop - mean(expendop), by = educ]
summary(dat2[,newVar])
dat2[,mean(newVar), by = educ]
dat2[,mn := mean(exxpendop), by = educ]
dat2[,mn := mean(expendop), by = educ]
dat2[, newVar := expendop - mn]
summary(dat2[,newVar])
dat2[,mean(newVar), by = educ]
inflateExpenditures <- function(x) {
return((1.03)*x)
}
dat2[,inflatedExp := inflateExpenditures(expendop)]
Sys.time(dat2[,inflatedExp := inflateExpenditures(expendop)])
system.time(dat2[,inflatedExp := inflateExpenditures(expendop)])
system.time(dat$inflatedExp <- inflateExpenditures(dat$expendop))
system.time(dat2[,inflatedExp := inflateExpenditures(expendop)]) <= system.time(dat$inflatedExp <- inflateExpenditures(dat$expendop))
rsubset <- sample(length(dat),500)
rsubset <- sample(nrow(dat),500)
datSubset <- dat[rsubset]
datSubset <- dat[rsubset,]
dat2Subset <- dat2[rsubset]
system.time(merge(datSubset,dat))
system.time(merge(dat2Subset,dat2))
dat2[,newKey := c(1:.N)]
dat2Subset <- dat2[rsubset]
setkey(dat2,"newKey")
setkey(dat2Subset,"newKey")
system.time(merge(dat2Subset,dat2))
dat[, lapply(.SD, sum), by=educ]
dat[, tail(.SD, sum), by=educ]
dat2[, tail(.SD, sum), by=educ]
dat2[, tail(.SD, 5m), by=educ]
dat2[, tail(.SD, 5), by=educ]
dat2[, tail(.SD, 2), by=educ]
dat2[, tail(.SD, 2), by= .(educ, income)]
dat2[, max(inflatedExp), by= .(educ, income)]
dat2[, .(x = max(inflatedExp), y = min(inflatedExp)), by= .(educ, income)] #what is this doing
dat2[, .(x = max(inflatedExp), y = min(inflatedExp), z = mean(inflatedExp)), by= .(educ, income)] #what is this doing
dat2[, `:=` (x = max(inflatedExp), y = min(inflatedExp), z = mean(inflatedExp)), by= .(educ, income)]
dat2[,x, by = .(educ,income)]
dat2[,max(x), by = .(income)]
dat2[,p = max(x), by = .(income)]
dat2[,.(p = max(x)), by = .(income)]
dat2[,.(p = max(x)), by = .(income, educ)]
summary(dat2[,x])
set.seed(1234)
rsubset <- sample(nrow(dat),500)
rsubset <- sample(nrow(dat),500) #this will be our random subset
datSubset <- dat[rsubset,]
dat2Subset <- dat2[rsubset] #notice the syntax is easier
dim(datSubset)
dim(dat2Subset)
system.time(merge(datSubset,dat))
system.time(merge(dat2Subset,dat2))
set.seed(1234)
dat <- read.csv("HealthExpend.csv")
for (nm in names(dat)) {
if (is.character(dat[,nm])) {
dat[,nm] <- as.factor(dat[,nm])
}
}
summary(dat)
names(dat) <- tolower(names(dat))
library(data.table) #load in the package
dat2 <- data.table(dat)
is.data.frame(dat)
is.data.frame(dat2)
is.data.table(dat)
is.data.table(dat2)
class(dat)
class(dat2)
summary(dat[dat$educ ==  "COLLEGE",c("maristat","income")])
summary(dat2[educ == 'COLLEGE', .(maristat,income)]) #noticec the syntax here
summary(dat2[educ == 'COLLEGE',income])
summary(dat2[educ == 'COLLEGE',.(income)]) #notice the difference
dat2[, mean(expendop), by = educ]
dat2[,mn := mean(expendop), by = educ]
dat2[, newVar := expendop - mn]
summary(dat2[,newVar])
dat2[,mean(newVar), by = educ] #up to significant digits, it is mean of 0
inflateExpenditures <- function(x) {
return((1.03)*x)
}
dat2[,inflatedExp := inflateExpenditures(expendop)]
dat2[, .(x = max(inflatedExp), y = min(inflatedExp), z = mean(inflatedExp)), by= .(educ, income)]
dat2[, `:=` (x = max(inflatedExp), y = min(inflatedExp), z = mean(inflatedExp)), by= .(educ, income)]
dat2[,.(p = max(x)), by = .(income, educ)]
summary(dat2[,x]) #what????
set.seed(1234)
rsubset <- sample(nrow(dat),500) #this will be our random subset
datSubset <- dat[rsubset,]
dat2Subset <- dat2[rsubset] #notice the syntax is easier
dim(datSubset)
dim(dat2Subset)
system.time(merge(datSubset,dat))
system.time(merge(dat2Subset,dat2))
dat2[,newKey := c(1:.N)] #what does this do?
dat2Subset <- dat2[rsubset] #same as above, but now we have the new column
setkey(dat2,"newKey")
setkey(dat2Subset,"newKey")
system.time(merge(dat2Subset,dat2)) #crazy fast!
q()
source('~/Research/ML Research/cluster calculation 10-13.R', echo=TRUE)
source('~/Research/ML Research/cluster evaluation 10-18.R', echo=TRUE)
source('~/Research/ML Research/cluster evaluation 10-18.R', echo=TRUE)
?quantile
library(survey)
?quantile
?quantile.survfit
source('~/Research/ML Research/cluster evaluation 10-18.R', echo=TRUE)
q()
q()
set.seed(1234)
dat <- read.csv("HealthExpend.csv")
getwd()
setwd("../..")
getwd()
setwd("../..")
getwd()
ls()
ls
library(catDist)
?catDist
library(catDist)
eskinIndexGather()
eskinIndex
eskinIndex()
?catDist
devtoold::document()
devtools::document()
library(catDist)
devtoold::document()
devtools::document()
?catDist
?goodallIndex
?eskinIndex
library(catDist)
q()
library(catDist)
?catDist
dat <- iris
iris
dat[c(1:4),] <- round(dat[c(1:4),])
dat[,c(1:4)] <- round(dat[,c(1:4)])
dat
for (i in names(dat)) { dat[,i] <- factor(dat[,i])}
summary(dat)
dist <- catDist(dat, method = "eskin")
library(catDist)
dist <- catDist(dat, method = "eskin")
library(catDist)
dist <- catDist(dat, method = "eskin")
save(dat, file ="dat.Rdata")
q()
library(catDist)
devtools::document()
eskinIndexGather(1,1,1)
library(catDist)
load("~/Research/catDist/dat.Rdata")
dist <- catDist(dat,method = "eskin")
devtools::use_rcpp()
devtools::document()
library(Rcpp)
document(())
devtools::document
devtools::document()
library(catDist)
devtools::document()
dist <- catDist(dat, method = "eskin")
library(catDist)
dist <- catDist(dat, method = "eskin")
View(dist)
library(catDist)
dist <- catDist(dat, method = "eskin")
View(dist)
dist[1,2]
dist[2,1]
dist[100,100]
dist[99,100]
dist[100,99]
dat$nms <- c(1:150)
dat
dist <- catDist(dat, method = "eskin", key = "nms")
View(dist)
q()
library(catDist)
load("C:/Users/joshu/Documents/Research/catDist/dat.Rdata")
dist <- catDist(dat, method = "eskin")
dist
dist <- catDist(dat, method = "eskin", weights = "1")
q()
library(data.table) #load dependencies
library(survey)
library(dplyr)
library(Hmisc)
dataLocation <- "C:/Users/Joshu/Documents/Research/ML Research/"
goodallClusterLocation <-  "C:/Users/Joshu/Documents/Research/ML Research/currentOutput/"
output <- "C:/Users/Joshu/Documents/Research/ML Research/currentOutput/"
vals <- c(2:50) #set this to be the number of clusters each time
itr <- 6 #number of the iterations that we are on -- 5th time cluster
dataItr <- 5 #number of the most up-to-date NHIS_MEPS_Variable_Picked
eval(parse(text = paste0( "load('",dataLocation,"NHIS_MEPS_Variable_Picked_",dataItr,".Rdata')" )))
summary(NHIS_MEPS)
getwd()
setwd("../..")
getwd()
setwd("./ML Research")
source('~/Research/ML Research/cluster evaluation 10-24.R')
dat$weights
dat$weights
sink()
dat$weights
source('~/Research/ML Research/cluster evaluation 10-24.R')
summary(dat$weights)
#general purpose program designed to evaluate clusters
#--------------------------------------------------------------------------
library(data.table) #load dependencies
library(survey)
library(dplyr)
library(Hmisc)
#global parameters:
#location of our data without clusters:
dataLocation <- "C:/Users/Joshu/Documents/Research/ML Research/"
#location of our data with clusters and our PAM() output:
goodallClusterLocation <-  "C:/Users/Joshu/Documents/Research/ML Research/currentOutput/"
output <- "C:/Users/Joshu/Documents/Research/ML Research/currentOutput/"
vals <- c(2:50) #set this to be the number of clusters each time
itr <- 6 #number of the iterations that we are on -- 5th time cluster
dataItr <- 5 #number of the most up-to-date NHIS_MEPS_Variable_Picked
#----------------------------------------------------------------------------
eval(parse(text = paste0( "load('",dataLocation,"NHIS_MEPS_Variable_Picked_",dataItr,".Rdata')" )))
eval(parse(text = paste0( "load('",goodallClusterLocation,"NHIS_MEPS_with_clusters",itr,".Rdata')" )))
for (i in vals){
eval(parse(text = paste0( "load('",goodallClusterLocation,"goodall_clusters",itr,"_",i,".Rdata')" )))
}
obj <- rep(0,length(vals))
for (j in 1:length(vals)){
nm <- paste0('clusterGoodall',vals[j])
eval(parse(text = paste0( "obj[j]<-",nm,"$objective[2]" )))
}
jpeg('within cluster average distance.jpg')
plot(vals, obj, type= "l", main = "pam() clustering assessment",
xlab= "k  (# clusters)", ylab = "average within cluster distance")
dev.off()
#-----------------------------------------------------------------------------
#expenditures: use medical
dat <- merge(dat,NHIS_MEPS)
dim(dat)
dim(NHIS_MEPS)
keep <- c("totexpy1","totexpy2","iptexpy1","iptexpy2","rxexpy1","rxexpy2","optexpy1","optexpy2", "weights")
summVar <- c("totexpy1","totexpy2","iptexpy1","iptexpy2","rxexpy1","rxexpy2","optexpy1","optexpy2")
for (nm in vals) {
keep <- append(keep, paste0("clusterGoodall",nm))
}
dat <- dat[,keep]
for (nms in summVar) {
dat[,nms] <- ifelse(dat[,nms] == -1,NA,dat[,nms])
dat[,paste0(nms,"_wtd")] <- dat$weights*dat[,nms]
}
summVar_wtd <- paste0(summVar,"_wtd")
options(scipen = 999)
#next for each cluster, generate a summary within each cluster
#first define a summarization function:
summary.meps <- function(dat,weights = 'weights') {
dat2 <- dat[,names(dat)[!names(dat) %in% weights]]
sapply(dat2, function(x) {
toReturn <- c( wtd.mean(x, weights = dat[,weights]),
sqrt(wtd.var(x, weights = dat[,weights]))
, wtd.quantile(x,weights = dat[,weights]))
names(toReturn)[1] <- "mean"
names(toReturn)[2] <- "SD"
return(toReturn)
})
}
summary(dat$weights)
sink()
summary(dat$weights)
source('~/Research/ML Research/cluster evaluation 10-24.R')
sink()
print(summary.meps(dat[dat[,'clusterGoodall",num,"']==i,c(summVar,'weights')]))
summary.meps(dat[dat[,'clusterGoodall",num,"']==i,c(summVar,'weights')])
summVar
dat[dat[,'clusterGoodall",num,"']==i,c(summVar,'weights')]
dat[dat[,'clusterGoodall",num,"']==i,c(summVar,'weights')]
num
dat[dat[,'clusterGoodall6']==i,c(summVar,'weights')]
num
dat[dat[,'clusterGoodall47']==i,c(summVar,'weights')]
source('~/Research/ML Research/cluster evaluation 10-24.R')
q()
set.seed(1234)
setwd("./Research/quicksort")
qsort <-  function(a) {
qsort_kernel <- function(lo, hi,num) {
i <-  lo
j <-  hi
while (i < hi) { #while we haven't reached the top index
pivot <- a[floor((lo+hi)/2)] #choose the pivot about halfway through
while (i <= j) {
while (a[i] < pivot) {
i <- i + 1
num <- num+1
}
while (a[j] > pivot) {
num <- num +1
j <- j - 1
}
if (i <= j) {
t <- a[i]
a[i] <<- a[j]
a[j] <<- t
i <- i + 1;
j <- j - 1;
}
}
if (lo < j) {
num <- num + qsort_kernel(lo, j,0)
}
lo <- i
j <- hi
}
return(num)
}
num <-  qsort_kernel(1, length(a),0)
return(num)
}
sortperf = function(n) {
v = runif(n)
Cn <- qsort(v)
Xn <- Cn - 2*(n+1)/n -4*n
return(Xn)
}
library(Rcpp)
sourceCpp("quickSortFuncs.cpp")
createTable3 <- function(n,matrix = NULL) {
if (is.null(matrix)) {
temp <- createTable(n)
} else {
temp <- createTable2(n,matrix)
}
rownames(temp) <- c(0:n)
colnames(temp) <- c(0:n)
return(temp)
}
getwd()
setwd("../..")
setwd("../..")
getwd()
library(catDist)
devtools::document()
